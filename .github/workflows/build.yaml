name: Push docker image to GCP

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  RUST_VERSION: 1.67

jobs:
  # test:
  #   runs-on: ubuntu-latest

  #   container:
  #     image: xd009642/tarpaulin:0.25.0-slim
  #     options: --security-opt seccomp=unconfined

  #   steps:
  #     - uses: actions/checkout@v3

  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     - uses: actions/setup-java@v3
  #       with:
  #         distribution: 'temurin'
  #         java-version: '17'

  #     - name: Set Credential File For Firebase
  #       run: | 
  #         echo $FIREBASE_ADMIN_KEY >> firebase-key.json
  #       shell: bash
  #       env:
  #         FIREBASE_ADMIN_KEY : ${{secrets.FIREBASE_ADMIN_KEY}}

  #     - name: Install Firebase
  #       run: |
  #         npm install -g firebase-tools@11.23.1
          
  #     - name: Run test
  #       run: | 
  #         export FIRESTORE_EMULATOR_HOST=localhost:8080
  #         export APP_FIREBASE__CREDENTIAL=firebase-key.json
  #         firebase emulators:exec --project mspr-epsi-coffee 'cargo tarpaulin --out Xml --output-dir coverage --fail-under 75'

  #     - name: Archive code coverage results
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: code-coverage-report
  #         path: coverage/cobertura.xml

  #     - name: Upload to codecov.io
  #       uses: codecov/codecov-action@v3
  #       with:
  #         fail_ci_if_error: true
  #         directory: ./coverage

  #     - name: Add Coverage PR Comment
  #       uses: marocchino/sticky-pull-request-comment@v2
  #       if: github.event_name == 'pull_request'
  #       with:
  #         recreate: true
  #         path: coverage/cobertura.xml

  # fmt:
  #   name: Rustfmt
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install rust toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #           toolchain: ${{ env.RUST_VERSION }}
  #           components: rustfmt

  #     - name: Run fmt 
  #       run: cargo fmt --all -- --check

  # clippy:
  #   name: Clippy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install rust toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #           toolchain: ${{ env.RUST_VERSION }}
  #           components: clippy

  #     - name: Run clippy
  #       run: cargo clippy


  build-and-push-to-artifact-registery:
    #needs: [test, fmt, clippy]
    runs-on: ubuntu-latest

    env:
      REPO_NAME: 'erp-api'
      IMAGE_NAME: 'erp_api'
      CLOUD_RUN_ID: erp-api-runner

    steps:
      - uses: actions/checkout@v3

      - uses: docker/setup-buildx-action@v1

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          bash ./scripts/git_update.sh -v patch

      # - id: 'auth'
      #   name: 'Authenticate to Google Cloud'
      #   uses: 'google-github-actions/auth@v1'
      #   with:
      #     credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      # - name: Configure Docker Client
      #   run: gcloud auth configure-docker europe-west9-docker.pkg.dev --quiet


      # - name: Login to GAR
      #   uses: docker/login-action@v2
      #   with:
      #     registry: europe-west9-docker.pkg.dev
      #     username: _json_key
      #     password: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
    

      - uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: europe-west9-docker.pkg.dev/mspr-epsi-coffee/erp-api/erp_api:v0.1.9, europe-west9-docker.pkg.dev/mspr-epsi-coffeeerp-api/erp_api:latest
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}


      # - name: Build Docker Image
      #   env:
      #     GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      #   run: | 
      #     export IMAGE_URL=europe-west9-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$REPO_NAME/$IMAGE_NAME
      #     docker build -t $IMAGE_URL:latest .
      #     docker build -t $IMAGE_URL:$GIT_TAG .

      # - name: Push Docker Image to Container Registry (GCR)
      #   env:
      #     GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      #   run: |
      #     export IMAGE_URL=europe-west9-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$REPO_NAME/$IMAGE_NAME
      #     docker push europe-west9-docker.pkg.dev/mspr-epsi-coffee/erp-api/erp_api:v0.1.8
      #     docker push $IMAGE_URL:latest

      # - name: Deploy To Cloud Run
      #   env:
      #     GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      #   run: |
      #     export IMAGE_URL=europe-west9-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$REPO_NAME/$IMAGE_NAME
      #     gcloud run deploy $CLOUD_RUN_ID --image=$IMAGE_URL:$GIT_TAG \
      #       --region=europe-west9 \
      #       --min-instances=0 \
      #       --max-instances=1 \
      #       --no-allow-unauthenticated \
      #       --port=8000
